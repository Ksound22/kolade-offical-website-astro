---
import Layout from "../../layouts/Layout.astro";
import TableOfContentHeadings from "../../components/TableOfContentHeadings.astro";
import { formatDate, buildTOC, fetchAllArticles } from "../../../utils";
import ReatedArticles from "../../components/ReatedArticles.astro";
import ShareOnSM from "../../components/ShareOnSM.astro";

export async function getStaticPaths () {
  const allArticles = await fetchAllArticles()

  return allArticles.map(entry => ({
    params: {
      slug: entry.slug
    },

    props: { entry }
  }));
}

const { entry } = Astro.props
const { Content, headings } = await entry.render();

const toc = buildTOC(headings)

// GEt related articles
// Extract the category from the current post
const currentPostCategory = entry.data.category;

// Extract the slug from the current post
const currentPostSlug = entry.slug;

const allArticles = await fetchAllArticles()
const randomisedArticles = allArticles.sort(() => Math.random() - Math.random())

const relatedArticles = randomisedArticles.filter(article => {
  return article.data.category === currentPostCategory && article.slug !== currentPostSlug
}).slice(0, 3);

const currentURL = `https://www.koladechris.com${Astro.url.pathname}`;
---

<Layout
  title={entry.data.title}
  description={entry.data.excerpt}
  canonicalLink={currentURL}
  OGUrl={currentURL}
  OGTitle= {entry.data.title}
  OGDesc= {entry.data.excerpt}
  OGImage={entry.data.coverImage}
  xtitle= {entry.data.title}
  xDesc= {entry.data.excerpt}
  xImg={entry.data.coverImage}
>

  <div class="copied"></div>

  <a href='/blog' role="button" class="back">Back to Blog Page</a>
  
  <div class="category-container">
    <a href={`/blog/category/${entry.data.category.toLowerCase().replace(/\s+/, "-")}`} class="category" role="button">
      {entry.data.category}
    </a>
  </div>

  <h1>{entry.data.title}</h1>
  <img
    src={entry.data.coverImage}
    alt={entry.data.title}
    class="cover-photo"
  />

  <p class="stats">Written by {entry.data.author} | { formatDate(entry.data.publishedDate)} |
  
    {entry.data.tags.map((tag:string, index:number) => (
      <span>
        <a class={index % 2 === 0 ? 'even-tag' : 'odd-tag'} href={`/blog/tag/${tag.toLowerCase()?.replace(/\s+/, "-")}`} class="tag">
          #{tag}
        </a>
      </span>
    ))} | {entry.data.readingTime} Read
  </p>  
  
  <div class="single-article-container">
    <div class="article-details">
      <Content />

      <p>Share the article with your friends and family:</p>
      <ShareOnSM entry={entry} />
    </div>

    <aside class="toc-and-related">
      
      <nav class="toc">
        <h2>Table of Content</h2>
        <ul>
          {toc.map((heading) => <TableOfContentHeadings heading={heading} />)}
        </ul>
      </nav>
      <div class="share">
        <h2>Share this Article</h2>
      <ShareOnSM entry={entry} />
      </div>
      <div>
        <h2>Related Posts</h2>
        <ReatedArticles relatedArticle={relatedArticles} />
      </div>
    </aside>
  </div>
</Layout>

<style>
  .single-article-container {
    display: flex;
    gap: 2.5rem;
    height: auto;
  }

  .copied {
    text-align: center;
    color: var(--primary-color);
    margin: 0 auto;
  }

  .article-details {
    flex: 1;
  }

  .toc-and-related {
    max-width: 30%;
    max-height: 100vh;
    position: sticky;
    top: 70px;
    flex: 1;
    padding-left: 30px;
  }

  ion-icon {
   color: var(--primary-color);
  }

  ion-icon:hover {
   color: var(--primary-hover);
   cursor: pointer;
  }

  h1 {
    font-size: var(--h1-font);
  }

  .back {
    color: var(--primary-color);
    display: inline-block;
    font-size: 1.2rem;
    margin-bottom: 2.5rem;
  }

  .category {
    color: var(--text-color);
    text-decoration: none;
    background: var(--back-bg);
    padding: 1rem;
    font-size: var(--paragraph-font);
  }

  .stats {
    margin-top: 1rem;
  }

  aside h2 {
    color: var(--accent-color);
    margin-bottom: 0.5rem;
  }
</style>

<style is:global>

  h2 {
    font-size: var(--h2-font);
    color: var(--primary-color);
    margin-top: 3.5rem;
    margin-bottom: 0
  }

  ul {
    font-size: var(--paragraph-font);
  }

  pre {
    padding: 1rem;
  }

  p {
    font-size: var(--paragraph-font);
  }

  img {
    border-radius: var(--border-radius);
  }

 .tags {
    display: flex;
    gap: 10px;
    margin-bottom: 1.5rem;
  }

  .tag {
    display: inline-block;
    border-radius: 5px;
    padding: 5px 10px;
    font-size: 0.875em;
    text-decoration: none;
    color: var(--text-color);
  }

  .even-tag {
    color: var(--accent-color);
    border-radius: var(--border-radius);
    text-decoration: none;
  }

  .even-tag:hover {
    color: var(--accent-hover);
  }

  .odd-tag {
    color: var(--primary-color);
    border-radius: var(--border-radius);
    text-decoration: none;
  }

  .odd-tag:hover {
    color: var(--primary-hover);
  }

  .toc-link.active {
    font-weight: bold;
    border-left: 2px solid var(--primary-color);
    padding-left: .3rem;
    color: var(--primary-color);
  }

  @media screen and (max-width: 1024px){
    .single-article-container {
      flex-direction: column;
      align-items: center;
      justify-content: center;
    }

    .article-details {
      flex: 1;
      max-width: 95%;
    }
    
    aside {
      display: none;
    }

     img {
 	  	max-width: 100%;
	  }
  }

  @media screen and (max-width: 820px) {
    img {
 	  	max-width: 100%;
	  }
  }
</style>

<script>
  const headingElements = document.querySelectorAll('h2[id], h3[id], h4[id]');
  const tocLinks = document.querySelectorAll('.toc-link');
  const copyLink = document.querySelector(".copy-link")
  const copiedText = document.querySelector(".copied")

  function handleScroll() {
    const scrollPosition = window.scrollY + (window.innerHeight / 2);

    headingElements.forEach((heading, index) => {
      const headingTop = heading.getBoundingClientRect().top + window.scrollY;
      const isActive = scrollPosition >= headingTop;

      if (isActive) {
        tocLinks.forEach((link) => link.classList.remove('active'));
        tocLinks[index].classList.add('active');
      }
    });
  }

  window.addEventListener('scroll', handleScroll);
  handleScroll();

  const copyToClipboard = (e) => {
    navigator.clipboard.writeText(window.location.toString());
    copiedText.innerHTML = `<p>Link Copied!</p>`

    setTimeout(() => {
      copiedText.innerHTML = ""
    }, 2000);
  };

  copyLink.addEventListener('click', copyToClipboard)
</script>