---
// import { getCollection } from "astro:content";
// import type { CollectionEntry } from "astro:content";

import Layout from "../../layouts/Layout.astro";
import TableOfContentHeadings from "../../components/TableOfContentHeadings.astro";
import { formatDate, buildTOC, fetchAllArticles } from "../../../utils";
import ReatedArticles from "../../components/ReatedArticles.astro";

export async function getStaticPaths () {
  // const allArticles: CollectionEntry<'articles'>[] = await getCollection('articles')

  const allArticles = await fetchAllArticles()

  return allArticles.map(entry => ({
    params: {
      slug: entry.slug
    },

    props: { entry }
  }));
}

const { entry } = Astro.props
const { Content, headings } = await entry.render();

const toc = buildTOC(headings)

// GEt related articles
// Extract the category from the current post
const currentPostCategory = entry.data.category;

// Extract the slug from the current post
const currentPostSlug = entry.slug;

const allArticles = await fetchAllArticles()
const randomisedArticles = allArticles.sort(() => Math.random() - Math.random())

const relatedArticles = randomisedArticles.filter(article => {
  return article.data.category === currentPostCategory && article.slug !== currentPostSlug
}).slice(0, 3);
---

<Layout title={entry.data.title}>
  <a href='/blog' role="button" class="back">Back to Blog Page</a>
  
  <div class="category-container">
    <a href={`/blog/category/${entry.data.category.toLowerCase().replace(/\s+/, "-")}`} class="category" role="button">
      {entry.data.category}
    </a>
  </div>
  
  <div class="single-article-container">
    <div class="article-details">
      <h1>{entry.data.title}</h1>
      <p class="stats">Written by {entry.data.author} | { formatDate(entry.data.publishedDate)} | {entry.data.readingTime} Read</p>
      <div class="tags">
        {entry.data.tags.map((tag:string, index:number) => (
          <span class={index % 2 === 0 ? 'even-tag' : 'odd-tag'}>
            <a href={`/blog/tag/${tag.toLowerCase()?.replace(/\s+/, "-")}`} class="tag">
              #{tag}
            </a>
          </span>
        ))}
      </div>

      <img
        src={entry.data.coverImage}
        alt={entry.data.title}
        width="800"
        height="500"
      />

        <article >
          <Content  />
        </article>

    </div>

    <aside class="toc-and-related">
      <h2>Table of Content</h2>

      <nav class="toc">
        <ul>
          {toc.map((heading) => <TableOfContentHeadings heading={heading} />)}
        </ul>
      </nav>

      <div>
        <h2>Related Posts</h2>
        <ReatedArticles relatedArticle={relatedArticles} />
      </div>
    </aside>

  </div>
</Layout>

<style>
  .single-article-container {
    display: flex;
    gap: 2.5rem;
    height: auto;
  }

  .article-details {
    flex: 1;
    max-width: 70%;
  }

  .toc-and-related {
    max-width: 30%;
    max-height: 100vh;
    position: sticky;
    top: 30px; 
    overflow-y: auto;
    flex: 1;
    padding-left: 30px;
  }

  h1 {
    font-size: var(--h1-font);
  }

  .back {
    color: var(--primary-color);
    display: inline-block;
    font-size: 1.2rem;
    margin-bottom: 2.5rem;
  }

  .category {
    color: var(--text-color);
    text-decoration: none;
    background: var(--back-bg);
    padding: 1rem;
    font-size: var(--paragraph-font);
  }

  .stats {
    margin-top: 1rem;
  }

  aside h2 {
    color: var(--accent-color);
  }
</style>

<style is:global>

  h2 {
    font-size: var(--h2-font);
    margin-top: 3.5rem;
    margin-bottom: 0
  }

  ul {
    font-size: var(--paragraph-font);
  }

  pre {
    padding: 1rem;
  }

  p {
    font-size: var(--paragraph-font);
  }

  img {
    border-radius: var(--border-radius);
  }

 .tags {
    display: flex;
    gap: 10px;
    margin-bottom: 1.5rem;
  }

  .tag {
    display: inline-block;
    border-radius: 5px;
    padding: 5px 10px;
    font-size: 0.875em;
    text-decoration: none;
    color: var(--text-color);
  }

  .even-tag {
    background-color: var(--accent-color);
    border-radius: var(--border-radius);
  }

  .even-tag:hover {
    background-color: var(--accent-hover);
  }

  .odd-tag {
    background-color: var(--primary-color);
    border-radius: var(--border-radius);
  }

  .odd-tag:hover {
    background-color: var(--primary-hover);
  }

  .toc-link.active {
    font-weight: bold;
    text-decoration: underline;
    color: var(--primary-color);
  }
</style>

<script>
  const headingElements = document.querySelectorAll('h2[id], h3[id], h4[id]');
  const tocLinks = document.querySelectorAll('.toc-link');

  function handleScroll() {
    const scrollPosition = window.scrollY + (window.innerHeight / 2);

    headingElements.forEach((heading, index) => {
      const headingTop = heading.getBoundingClientRect().top + window.scrollY;
      const isActive = scrollPosition >= headingTop;

      if (isActive) {
        tocLinks.forEach((link) => link.classList.remove('active'));
        tocLinks[index].classList.add('active');
      }
    });
  }

  window.addEventListener('scroll', handleScroll);
  handleScroll();
</script>